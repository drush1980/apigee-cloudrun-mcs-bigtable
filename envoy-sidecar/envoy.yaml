static_resources:
  listeners:
  # ingress
  - name: mainapp_sidecar_listener
    address:
      socket_address:
        # Entrypoint for service through Envoy
        address: 0.0.0.0
        port_value: 8080
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          # used when emitting stats
          stat_prefix: mainapp_sidecar_hcm_filter
          route_config:
            name: mainapp_sidecar_http_route_config
            virtual_hosts:
            # name used when emitting stats, not imp for routing itself
            - name: mainapp_sidecar_virtual_host
              domains: 
              - "*"
              routes:
              - name:
                match:
                  prefix: "/"
                route:
                  host_rewrite_literal: bigtable.googleapis.com
                  cluster: bigtable.googleapis.com
                  timeout: 0s
                  max_stream_duration:
                    grpc_timeout_header_max: 0s
          access_log: 
          # stdout access log
          # - name: envoy.access_loggers.stdout
          #   typed_config:
          #     "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
          # collect Apigee analytics
          - name: envoy.access_loggers.http_grpc
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig
              common_config:
                transport_api_version: V3
                grpc_service:
                  envoy_grpc:
                    cluster_name: apigee-remote-service-envoy
                log_name: apigee-remote-service-envoy
          http_filters:
          # evaluate JWT tokens, allow_missing allows API Key also
          - name: envoy.filters.http.jwt_authn
            typed_config: 
              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
              providers:
                apigee:
                  issuer: https://@@APIGEE_HOST@@/remote-token-bigtable/token
                  audiences:
                  - remote-service-client
                  remote_jwks:
                    http_uri:
                      uri: https://@@APIGEE_HOST@@/remote-token-bigtable/certs
                      cluster: apigee-auth-service
                      timeout: 5s
                    cache_duration:
                      seconds: 300
                  payload_in_metadata: https://@@APIGEE_HOST@@/remote-token-bigtable/token
                  # grab the GCP token claim from the JWT, and set it as a header for the Lua filter below
                  claim_to_headers:
                    - header_name: x-gcp-token
                      claim_name: gcp_token
              rules:
              - match:
                  prefix: /
                requires:
                  requires_any:
                    requirements:
                    - provider_name: apigee
                    - allow_missing: {}
          # evaluate Apigee rules
          - name: envoy.filters.http.ext_authz
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
              transport_api_version: V3
              grpc_service:
                envoy_grpc:
                  cluster_name: apigee-remote-service-envoy
                timeout: 1s
              metadata_context_namespaces:
              - envoy.filters.http.jwt_authn
          # lua filter to replace the Authorization header
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              default_source_code:
                inline_string: |
                  function envoy_on_request(request_handle)
                    local token = request_handle:headers():get("x-gcp-token")
                    if token then
                      -- Use 'replace' instead of 'add' to overwrite any existing value of the target header 
                      request_handle:headers():replace("Authorization", "Bearer " .. token)
                      request_handle:headers():remove("x-gcp-token")
                    end
                  end
          # router
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  clusters:
  # cluster for Bigtable
  - name: bigtable.googleapis.com
    connect_timeout: 0.25s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    http2_protocol_options: {}
    lb_policy: round_robin
    load_assignment:
      cluster_name: bigtable.googleapis.com
      endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: bigtable.googleapis.com
                  port_value: 443
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
  # Cluster for Apigee remote service
  - name: apigee-remote-service-envoy
    type: LOGICAL_DNS
    http2_protocol_options: {}
    load_assignment:
      cluster_name: apigee-remote-service-envoy
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: "localhost"
                port_value: 5000
    common_lb_config:
      healthy_panic_threshold:
        value: 50.0
    health_checks:
      - timeout: 1s
        interval: 5s
        interval_jitter: 1s
        no_traffic_interval: 5s
        unhealthy_threshold: 1
        healthy_threshold: 3
        grpc_health_check: {}
    connect_timeout: 0.25s
  # Cluster for Apigee JWKS certs
  - name: apigee-auth-service
    connect_timeout: 2s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: apigee-auth-service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: "@@APIGEE_HOST@@"
                port_value: "443"
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
        sni: "@@APIGEE_HOST@@"